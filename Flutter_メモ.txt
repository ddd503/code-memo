
定数で配列を定義（文字列型）
static const _categoryNames = <String>[
    'Length',
    'Area',
    'Volume',
    'Mass',
    'Time',
    'Digital Storage',
    'Energy',
    'Currency',
  ];

for文
３回Categoryクラスをinitしてcategoriesに詰めている
for (var i = 0; i < 3; i++) {
      categories.add(Category(
        name: _categoryNames[i],
        color: _baseColors[i],
        iconLocation: Icons.cake,
      ));
    }

// Propaty
  final String name;
  final ColorSwatch color;
  final IconData iconLocation;

  // nonNullのイニシャライズ
  const Category({
    Key key,
    @required this.name,
    @required this.color,
    @required this.iconLocation,
  })  : assert(name != null),
        assert(color != null),
        assert(iconLocation != null),
        super(key: key);

これつけるとnullチェックしない
@required

タップ属性を持たせる
InkWell

アプリの音量を調整したい
Slider

ユーザーに効率的にスクロールさせたい写真が多数あります
GridView

私はフォームを作成していて、リストからユーザーが聴くすべての種類の音楽を選択するようにしています
Checkbox

ユーザーにリストから誕生日の月を選択させたい
Dropdown

私は自分のアプリの画面をオーバーレイする素敵な半透明のライトボックスを作りたいです。
Opacity

私がしたいのは、この画像を画面の中央に配置することだけです。
Center

私は3つのコンテナを持っています、そしてそれらが常にスクリーンの3分の1を占めるようにしたいです。
Flex

送信ボタンを常に画面の右上に配置したいです。
Align

私は私のアプリの一番下に、ページ上の他のウィジェットの「上に」置いて、常に表示されるスティッキーフッターが欲しいのです。
Stack

左にスワイプしたときにウィジェットにアクションを実行させたい
GestureDetector

StatelessWidgetはimmutableなwidget、
finalの後に作られる

ナビバーのクラス
MaterialApp

 MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Flutter Sample') // これが多分親のView
    );

文字のサイズ変える
style: Theme.of(context).textTheme.display1


View(Widget)はサブクラスを呼ぶ時は以下で定義する
class クラス名 extends State<親View>


画面サイズの取得（build時）
 Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    return Center(child: Container(width: width, height: height, color: Colors.blue,),);
  }

定数の書き方
const 定数名 = 値
const _padding = EdgeInsets.all(16.0);

finalが付いているやつはwidgetsのサブクラス（subView的なやつ）

WidgetがViewクラス的な扱い
例：StatefulWidget

setStateの中で値を代入しないと、変更が効かないらしい（メソッドの中のsetStateの中で）

void _incrementCounter() {
setState(
(
// ここでいじる
));
}

以下のメソッドはsetStateが呼ばれると呼ばれるらしい
Overfideなので、Widgetクラスのライフサイクル的なやつか?
setStateした内容によって、必要なサブクラス(subViewのみ更新してくれる)
 @override
  Widget build(BuildContext context) {

}

buildメソッドの中ではそれぞれ決まったコンポーネントが、class側で用意されたサブクラスを参照して画面表示に使う
完全に受け身な役割（用意したものを読みにいくだけ）


クラスのinit
MyHomePage({Key key, this.title}) : super(key: key);

呼び出し側（init時にtitleをDIする感じ）
MyHomePage(title: 'Flutter Demo Home Page')


画面の構成要素

appBar: ナビバー的な部分
body: UIView的な部分
その子コンポーネントとして、childがあってそのchildの種類によって各種レイアウトが表現できるっぽい
Column: 中に書いたviewを縦に並べる、中の要素のサイズでColumnのサイズが決まる

ボタンとかコードで作るときは最後にカンマをつける（ビルド時の効率のため?）
 floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ), // これ

