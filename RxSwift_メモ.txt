
let disposeBag = DisposeBag()

let source = Observable.of(1, 2, 3, 4, 5, 6)

// 全要素に対して同一に処理を施す場合はscanで良い、ロジックを挟みたい場合はreduceを使う
source.scan(0, accumulator: +)
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)







let disposeBag = DisposeBag()

let source = Observable.of(1, 2, 3)

// reduceは初期値から順番に処理を回す
source.reduce(0, accumulator: +) // 要素を全部足していく
    .subscribe(onNext: {
        // 足算の結果が流れてくる
        print($0)
    }).disposed(by: disposeBag)

// やってることは上と同じだが、ロジックを挟めるようにした版（足す前にみれる）
source.reduce(0, accumulator: { summary, newValue in
    // 今の蓄積値と次の要素が流れてくるので足して返す
    return summary + newValue
}).subscribe(onNext: {
    print($0)
}).disposed(by: disposeBag)





let disposeBag = DisposeBag()

let button = PublishSubject<Void>()
let textField = PublishSubject<String>()

// withLatestFromは呼ばれたら()内に指定した購読対象の最新の結果を購読処理する、最新がない場合は無視
let observable = button.withLatestFrom(textField)

observable.subscribe(onNext: {
    print($0)
}).disposed(by: disposeBag)

textField.onNext("ddd")
textField.onNext("Swift")
textField.onNext("RxSwift")

// ボタンを押すと最新のtextFieldの値が流れるイメージ
button.onNext(())

// 結果：RxSwift






let disposeBag = DisposeBag()

// 登録時初期値なし
let left = PublishSubject<Int>()
let right = PublishSubject<Int>()
let center = PublishSubject<Int>()

// combineLatestは複数の購読対象を並列で処理できる（対象が全て購読されないと処理されない、left, rightともに呼ばれないとダメ）
// 各対象にて最新の値が保持される
let observable = Observable.combineLatest(left, right, center, resultSelector: { lastLeft, lastRight, lastCenter in
    // resultSelectorで購読時の並列結果出力の形を指定している
    "\(lastLeft) \(lastRight) \(lastCenter)" // 例: 45 1 20
})

observable.subscribe(onNext: {
    print($0)
}).disposed(by: disposeBag)

left.onNext(45)
right.onNext(1)
center.onNext(20)
left.onNext(30)
right.onNext(1)
right.onNext(2)
center.onNext(40)
/*
結果
 45 1 20
 30 1 20
 30 1 20
 30 2 20
 30 2 40
 */








let disposeBag = DisposeBag()

// 登録時初期値なし
let left = PublishSubject<Int>()
let right = PublishSubject<Int>()

// ２本の道（オブザーバブル）
let source = Observable.of(left.asObservable(),
                           right.asObservable())
// 一本にマージする（2本の道に入るイベントを統合する）
// mergeは複数の道を統合して、入ってくるイベントの受け口を統合する
let observable = source.merge()

observable.subscribe(onNext: {
    print($0)
}).disposed(by: disposeBag)

left.onNext(5)
left.onNext(3)
right.onNext(2)
right.onNext(1)
left.onNext(99)

// 結果：5, 3, 2, 1, 99








let disposeBag = DisposeBag()

// concatは要素ごとを連結させてオブザーバブルを流せる
let first = Observable.of(1, 2, 3)
let second = Observable.of(4, 5, 6)

// オブザーバブルの配列を結合
let observable = Observable.concat([first, second])

observable.subscribe(onNext: {
    print($0)
}).disposed(by: disposeBag)
// 結果：1, 2, 3, 4, 5, 6




let disposeBag = DisposeBag()

let numbers = Observable.of(2, 3, 4)

// startWithはObservableの最初に流す要素（event）を指定できる
// スタート値の後に指定の要素が流れる（10の後に2がくる）
let observable =  numbers.startWith(10)
observable.subscribe(onNext: {
    print($0)
}).disposed(by: disposeBag)

// 結果：10, 2, 3, 4




// 非同期処理を同期的に行い返す（urlRequest作成→リクエスト実行→レスポンスをparse→observableで流す）
        // flatMapは非Observableが流れてきた時
        // mapはObservableが流れてきた時
        return Observable.from([resource.url])
            .flatMap { url -> Observable<Data> in
                let request = URLRequest(url: url, cachePolicy: .useProtocolCachePolicy, timeoutInterval: 5.0)
                return URLSession.shared.rx.data(request: request)
        }.map { data -> T? in
            return try? JSONDecoder().decode(T.self, from: data)
        }.asObservable()
    }




justはobserverbleとしてRxでハンドルできる方で値を流せる

// mapは流れてきた値をそのまま使うが、flatMapはObsevableを被せずにハンドルできる
  let ddd = Observable.just(url).map { (url) -> Observable<Data> in
            let request = URLRequest(url: url, cachePolicy: .useProtocolCachePolicy, timeoutInterval: 5.0)
            return URLSession.shared.rx.data(request: request)
        }
        // 戻り値の型：Observable<Observable<Data>>

        let ddd2 = Observable.just(url).flatMap { (url) -> Observable<Data> in
            let request = URLRequest(url: url, cachePolicy: .useProtocolCachePolicy, timeoutInterval: 5.0)
            return URLSession.shared.rx.data(request: request)
        }
        // 戻り値の型：Observable<Data>




let disposeBag = DisposeBag()

struct Student {
    var score: BehaviorRelay<Int>
}

let people1 = Student(score: BehaviorRelay(value: 20))
let people2 = Student(score: BehaviorRelay(value: 40))
let people3 = Student(score: BehaviorRelay(value: 30))

let student = PublishSubject<Student>()

// flatMapLatestは購読後、別のオブザーバーに参照されたら、元の購読対象は外れる（同時購読対象は1つだけ）
student.asObservable()
    .flatMapLatest { $0.score.asObservable() }
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)

// 購読開始（開始から判定イベントは流れる）
student.onNext(people1)
student.onNext(people2) // people1の購読は外れる
student.onNext(people3) // people2の購読は外れる
// 以降は出力されない
people1.score.accept(50)
people2.score.accept(40)
people1.score.accept(55)
// 結果：20, 40, 30












let disposeBag = DisposeBag()

struct Student {
    var score: BehaviorRelay<Int>
}

let people1 = Student(score: BehaviorRelay(value: 75))
let people2 = Student(score: BehaviorRelay(value: 95))

let student = PublishSubject<Student>()

// flatMapとmap
student.asObservable()
    .flatMap { $0.score.asObservable() }
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)

// 購読開始（開始から判定イベントは流れる）
student.onNext(people1)
// 100点にした上で判定イベント
people1.score.accept(100)
// 購読開始（開始から判定イベントは流れる）
student.onNext(people2)

people2.score.accept(80)

people1.score.accept(50)










let disposeBag = DisposeBag()

// mapはイベント全てに共通の処理を施す
Observable.of(1, 2, 3, 4, 5)
    .map {
        return $0 * 2
   }.subscribe(onNext: {
        print($0)
   }).disposed(by: disposeBag)
// 結果：2, 4, 6, 8, 10






let disposeBag = DisposeBag()

// toArrayはイベントを１つの配列として扱う
Observable.of(1, 2, 3, 4, 5)
    .toArray().subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)
// 結果：　[1, 2, 3, 4, 5]




subscribe(onNext: {})
なら非オプショナルで値がくる 

let strikes = PublishSubject<String>()

let disposeBag = DisposeBag()

// ignoreElements()は流した値を全て無視する
strikes
    .ignoreElements()
    .subscribe { _ in
    print("[Subscription is Called]")
}.disposed(by: disposeBag)

strikes.onNext("A")
strikes.onNext("B")
strikes.onNext("C")

strikes.onCompleted()



let strikes = PublishSubject<String>()

let disposeBag = DisposeBag()

// elementAt()は指定した値以上のeventが流れた時に初めて購読する
// 結果： Xが１つだけ出力される
strikes.elementAt(2)
    .subscribe(onNext: { text in
        print(text)
    }).disposed(by: disposeBag)

strikes.onNext("X")
strikes.onNext("X")
strikes.onNext("X")




let disposeBag = DisposeBag()

// filterは順番に取り出して、処理を施す（map的に使う）
Observable.of(1, 2, 3, 4, 5, 6, 7)
    .filter { $0 % 2 == 0 }
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)
// 結果：2, 4, 6




let disposeBag = DisposeBag()

// skip()は指定した数字の分だけ前の要素を無視して購読する
Observable.of("A", "B", "C", "D", "E", "F")
    .skip(3)
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)
// 結果：D, E, F





let disposeBag = DisposeBag()

// skipWhile {} は中で指定した条件から外れるまでskipを繰り返し、外れて以降は全て購読する
Observable.of(2, 2, 3, 4, 4).skipWhile { $0 % 2 == 0 }.subscribe(onNext: {
    print($0)
}).disposed(by: disposeBag)
// 結果：3, 4, 5







let disposeBag = DisposeBag()

let subject = PublishSubject<String>()
let trigger = PublishSubject<String>()

// skipUntil()は指定したオブジェクトが購読されるまで購読させない縛り(今回の$0はsubjectの方)
subject.skipUntil(trigger)
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)

subject.onNext("A")
subject.onNext("B")

trigger.onNext("X")

subject.onNext("C")

// 結果：C（A, Bは無視される）






let disposeBag = DisposeBag()

// take()は指定した数だけ先にきた値を購読して、それ以降は無視する
Observable.of(1, 2, 3, 4, 5, 6)
    .take(3)
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)
// 結果：1, 2, 3（4以降は無視）







let disposeBag = DisposeBag()

// takeWhile {} は中で指定した条件を満たすうちは購読を続け、満たさない要素がきた以降は購読しない
Observable.of(2, 4, 6, 7, 8, 10)
    .takeWhile { $0 % 2 == 0 }
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)
// 結果：2, 4, 6（7が満たさなかったから）







let disposeBag = DisposeBag()

let subject = PublishSubject<String>()
let trigger = PublishSubject<String>()

/// takeUntil()は中に指定したsubjectが購読されるまで自身の購読を続ける（triggerが購読されたらsubjectの購読は止まる）
subject.takeUntil(trigger)
    .subscribe(onNext: {
        print($0)
    }).disposed(by: disposeBag)

subject.onNext("1")
subject.onNext("2")

trigger.onNext("X")

subject.onNext("3")

// 結果：1, 2






通知系の購読登録
NotificationCenter.default.rx.notification(.AVCaptureSessionDidStartRunning)
            .subscribe(onNext: { [weak self] (_) in
                guard let self = self else { return }
                DispatchQueue.main.async {
                    self.buttonAreaView.setViewState(.shoot)
                }
            }).disposed(by: disposeBag)

        NotificationCenter.default.rx.notification(.NSManagedObjectContextDidSave)
            .subscribe(onNext: { [weak self] (_) in
                guard let self = self else { return }
                DispatchQueue.main.async {
                    // TODO: インジケータストップ
                    self.dismiss(animated: true)
                }
            }).disposed(by: disposeBag)



// AVCaptureSessionのisRunningをobservable（監視できる形）にする拡張
extension Reactive where Base: AVCaptureSession {
    var isRunning: Observable<Bool> {
        return observe(Bool.self, #keyPath(AVCaptureSession.isRunning))
            .flatMap { $0.flatMap { Observable.just($0) } ?? .empty() }
    }
}



// errorのときにデフォルト値を返す
.flatMap { value -> Observable<Int> in
    return Observable<Int>.error(NSError())
        .catchErrorJustReturn(1)
}

// errorのときに無視する
.flatMap { value -> Observable<Int> in
    return Observable<Int>.error(NSError())
        .catchError { error in
            return error
                .flatMap { _ inObservable<Int>.empty() }
        }
}

1回のonNext(value)の直後にonCompletedを発行します
Observable.just(1)

手順を数値で指定できる
let scheduler = TestScheduler(initialClock: 0)

1秒ごとに順に入力させている
let observable = scheduler.createHotObservable([
            Recorded.next(1, "R"),
            Recorded.next(2, "Rx"),
            Recorded.next(3, "RxS"),
            Recorded.next(4, "RxSw"),
            Recorded.next(5, "RxSwi"),
            Recorded.next(6, "RxSwift")
            ])

// 生成した手順をスタートする
scheduler.start()

printしてみる

_ = observable.subscribe(onNext: {
            print($0)
        })

結果
R
Rx
RxS
RxSw
RxSwi
RxSwift


debounceは指定の時間の間の処理を無視してくれる（TestSchedulerを用意して時間を測らせる）

func test_debounce() {
        let scheduler = TestScheduler(initialClock: 0)
        // 1秒ごとの手順を指定
        let observable = scheduler.createHotObservable([
            Recorded.next(1, "R"),
            Recorded.next(2, "Rx"),
            Recorded.next(3, "RxS"),
            Recorded.next(4, "RxSw"),
            Recorded.next(5, "RxSwi"),
            Recorded.next(6, "RxSwift")
            ])

        // 1秒以内変化は無視する条件付きでprint（結果、6番目の手順まで1秒以内の処理なので無視され、「RxSwift」しか出ない）
        _ = observable
            .debounce(.seconds(1), scheduler: scheduler)
            .subscribe(onNext: {
                print("onNext:", $0)
            })

        // 結果は「RxSwift」のみ
        scheduler.start()
    }



ストリーム（処理の流れ、監視）に対するオペレーター（処理条件を加える filterとか）がいる

オペレーター
orEmpty・・・nilが来たら空文字(非オプショナル)を入れてくれる

asObservable()・・・監視対象として確定

オペレーターとして使うには、戻り値がobservable属性を持ってないとだめ
つまり監視対象型の属性にしないとrxでは扱ってくれない（宣言的に書くゆえに型を把握しておきたいから）
どうするか　→ 一番単純なのは

.justで囲む　→  .just(10)
戻り値の書き方　＝　Observable<Int>

observable（監視される変数型）を作るときはletで良い（値の変化を購読するからnewではない）
let signupEnabled: Observable<Bool>

ui系を監視するときはbindを使う

validatedUsername(enum)の結果によってラベルの表示変える

bindのルール
同じ型にする（型通しが同じならbindで受け渡し可能！！）
・validatedUsername: 型 ＝　bind(to: 型)

viewModel.validatedUsername
            .bind(to: usernameValidationOutlet.rx.validationResult)
            .disposed(by: disposeBag)

// enumの結果をラベルに伝える
extension Reactive where Base: UILabel {
    var validationResult: Binder<ValidationResult> {
        return Binder(base) { label, result in
            label.textColor = result.textColor
            label.text = result.description
        }
    }
}


複数箇所から購読（subscribe）されるときはhot coolに気をつける
.share(replay: 1)でhotにする

coolだと一度の購読で複数箇所に情報を渡せない
複数分購読する

driver はUI用のobserver
・mainスレッドでレスポンスくる
・エラーは届かない
が確約

UI系のプロパティのobserveはdriver

hot ・・・保持する（購読対象が複数の場合はキャッシュを読んでくれるイメージ）
cold・・・保持しない（キャッシュを読んではダメなとき、ボタンのタップイベントとか結果自体を保持してはダメ）

長押しを購読
 let signinLongpress = signinButton.rx.controlEvent([.touchDown])
    signinLongpress
        .flatMapLatest { _ in
            Observable<Int64>.interval(3, scheduler: MainScheduler.instance)
                .take(1)
        }
        .subscribe(onNext:{ _ in print("do fun stuff only once when longpress detected")})
        .disposed(by: disposeBag)
