Viewが初めて描画されるタイミングで呼ばれるコールバックメソッドとして onAppear が用意されています。
(この逆のメソッドとしてViewが非表示になるタイミングで呼ばれる onDisappear もあります。)
NavigationLinkを使った画面遷移の場合は、親画面へ戻る時には親画面の再描画が走ります。そしてこのタイミングで onAppearが呼ばれます
しかし、sheetを使ってモーダルとして画面を表示した場合、モーダルを閉じたタイミングでは onAppearは呼ばれません


@Published
@PublishedはObservableObjectプロトコルに準拠したクラス内のプロパティを監視し、変化があった際にViewに対して通知を行う役目があります。

@StateObject
シングルトンにしたいとき、Viewに対してインスタンスを1つだけ生成して管理する、同じViewを再生成してもインスタンスは共有される

＠ObservedObject
生成したインスタンス毎にデータを監視対象とする

@EnvironmentObject
EnvironmentObjectは階層が上位のViewからenvironmentObject()で渡されたインスタンスにアクセスできる
とりあえず、データソース系はこれで渡すと良い
EnvironmentObjectとして宣言して、外からStateObjectを渡すイメージ

@SceneStorage
画面遷移を挟んだ場合でもインスタンスを解放せず保持するプロパティラッパー
次の画面と共同で使う値など

@StateObject
ObservableObjectをViewで監視する際につける

@State
Viewで通常の値型の変数を監視する場合につける

.sheet(isPresented: $Bool) {}
モーダルを画面上に出す
モーダル閉じる判定ようにBoolを渡す必要がある
{} の内部でViewを返せばそのViewがモーダルに乗る

.task
画面が表示された時に実行される。
onAppear と同じようですが、画面が非表示となった時に task で実行されている処理が自動的にキャンセルされる
、画面が再表示されたときに処理結果が重複することを避けることができます

NavigationViewがないとNavigationLinkは動かない


テキストの行数制限reservesSpaceは使わない行のスペースが可変が固定確保かを表す
lineLimit(2, reservesSpace: false)

なぜVStackでpinnedViewsは使えないの？








オペレーター

.forEach
戻り値なし
weakselfなしで使える

.flatMap
返す値をPublisherを定義する、すでに流れてきている場合は、追加でpublisher(購読)したいことがなければmapで良い

.map
返す値のOutputの部分だけ変えられる（TodoInfo部分）AnyPublisher<TodoInfo, Error>

.mapError
エラーの種類をすげ替えるよう


.replaceError(with: nil)
エラーの場合に適当な値を流す（エラー判定は流れる）上ではエラーの場合はnilを後続へ流している
.catch
エラーの場合に適当な値を流す（エラー判定は流れない）

.subscribe(on: DispatchQueue.global())
これより前の処理に対してかかるスレッド指定

.receive(on: DispatchQueue.global())
これより後ろの処理に対してかかるスレッド指定

.assign
プロパティとバインドする（エラーが流れないように事前にreplaceErrorなどで値を確定させておく）
エラーが流れてこないpublisherに限り、バインディング対象(購読対象)を決定できる（sinkのエラーハンドルない版）
Neverだったり、.catchでエラーを流さない作りになっているもの
pub.assign(to: \.message, on: obj)
objクラスが持つmessageとpubに流れるstringをバインド

Publisherの種類

公式のPublisher

・Future
非同期用、Resultをクロージャで返せる

・Just
同期的に値を返すときに使う、Futureと違ってErrorを返せない、失敗ケースがない
エラーハンドル時は固定文言を代わりに返したりする

PassthroughSubject・・・保持しないPublisher、.sendしたときに流れる
CurrentValueSubject・・・保持するPublisher、.valueでsendした値を参照できる

マッピングの例
// 1
let url = URL(string: "https://api.github.com/users/V8tr/repos")!

// 2
let token = URLSession.shared.dataTaskPublisher(for: url)
    .map { $0.data } // 3
    .decode(type: [Repository].self, decoder: JSONDecoder()) // 4
    .sink(receiveCompletion: { completion in // 5
        print(completion)
    }, receiveValue: { repositories in
        print("V8tr has \(repositories.count) repositories")
    })


多分viewとのbind 
assign(to:on:) 

例
let sub = NotificationCenter.default
    .publisher(for: NSControl.textDidChangeNotification, object: filterField)
    .map( { ($0.object as! NSTextField).stringValue } )
    .assign(to: \MyViewModel.filterString, on: myViewModel)


例2
let sub = NotificationCenter.default
    .publisher(for: NSControl.textDidChangeNotification, object: filterField) // テキストフィールドの変更を監視
    .map( { ($0.object as! NSTextField).stringValue } ) // textfieldからtextだけ抜き取る
    .filter( { $0.unicodeScalars.allSatisfy({CharacterSet.alphanumerics.contains($0)}) } ) // テキストにフィルターかける
    .debounce(for: .milliseconds(500), scheduler: RunLoop.main) // 検知のインターバルを決めれる（遅延実行設定）ここでは0.5秒毎にメインスレッドで検知
    .receive(on: RunLoop.main) // 値を受けるときはメインスレッドでasnycで受ける
    .assign(to:\MyViewModel.filterString, on: myViewModel) // textとviewとバインド

上で作った購読をキャンセルするとき
sub.cancel()

 // ニュース記事一覧の取得
        let viewDidLoad = input.viewDidLoad
            .flatMap { [unowned self] _ in self.newsUseCase.readNewsList() }
            .map { (articles) -> ViewState in
                articles.isEmpty ? .noResults : .success(articles)
            }
            .replaceError(with: .failure)
            .eraseToAnyPublisher()


toolBarの使い方
NavigationView {
            Group {
            List {
                ForEach(items) { item in
                    Text("Item at \(item.timestamp!, formatter: itemFormatter)")
                }
                .onDelete(perform: deleteItems)
            }

            }
            .navigationTitle("Repositories")
            .toolbar(content: {
                ToolbarItem(placement: .navigationBarTrailing){
                    Button(action: {}) {
                        Image(systemName: "square.and.arrow.up")
                    }
                }
                ToolbarItem(placement: .navigationBarLeading){
                    Button(action: {}) {
                        Image(systemName: "cart")
                    }
                }
                // placementで色々な表示方法を選べる
                ToolbarItem(placement: .navigation){
                    Button(action: {}) {
                        Image(systemName: "yensign.square")
                    }
                }

                // カスタムで作る場合(bottomBarでは自由度が少ないからカスタムでやっても良い)
                ToolbarItemGroup(placement: .bottomBar) {
                    Button(action: {}) {
                        Image(systemName: "arrow.uturn.backward")
                    }
                    Spacer()
                    Text("操作")
                    Spacer()
                    Button(action: {}) {
                        Image(systemName: "arrow.uturn.forward")
                    }
                }

            })
        }



AnyPublishの作り方
Just・・・同期的に値を返せる、エラーは発行できない
Future・・・非同期的に値を返せる、エラーも発行できる

処理前に通る
.handleEvents(receiveSubscription: { [weak self] _ in
                self?.repos = .loading
            })
以降の処理をスレッド切り替え
.receive(on: DispatchQueue.main)

protocolはObservableObjecttoshite@StateObjectで監視対象にできないらしい

Publisherと普通の関数を繋げる場合はmap、PublisherとPublisherを繋げる場合はflatMapを使います。
https://zenn.dev/ryotapoi/articles/7dba6606f8e80b8f65d8


遅延実行
func ddd(array: [PublicRepository]) -> AnyPublisher<[Repo], Error> {
        return Deferred { //Deferred 宣言時には走らない、sbscribe時に初めて走る
            Future<[Repo], Error> { (promise) in
                DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                    let dd = array.map {
                        Repo(id: $0.id,
                             name: $0.name,
                             owner: User(name: $0.owner.login),
                             description: $0.description ?? "",
                             stargazersCount: $0.stargazersCount)
                    }
                    promise(.success(dd))}
            }
        }
        .eraseToAnyPublisher()
    }




ViewDidLoad -> onAppear

ボタン太字
.fontWeight(.bold)

@State
SwiftUIでのViewはstructであるため保持するプロパティを変更することができません。
そこで、@Stateの出番です。
@Stateを付与したプロパティはメモリ管理がSwiftUIフレームワークに委譲され、変更が可能となります。
プロパティは値の変更が監視され、変更時に宣言されたViewのbodyが再描画されます。

ただし、そのプロパティへのアクセスは宣言されたView内でのみとなります。
また、値が変更されるようなアクセスでは’$’を付与する必要があります。

@ObservedObject
これは@Stateとよく似たものになります。
@StateでViewの状態管理は可能ですが、複数の値を状態管理するとなるとプロパティの宣言が多くなり、管理が大変になります。
そこで、@ObservedObjectを利用すると、そういったプロパティをひとまとめにしたオブジェクトとして管理することができます。
付与するオブジェクトはObservableObjectプロトコルに準拠する必要があります。
また、監視するプロパティは@Publishedを付与します。

viewmodelに@ObservedObjectをつけて、viewmodel側のプロパティに@publishedをつける

@EnvironmentObject
こちらは先ほどの@Stateや@ObservedObjectとは少し異なります。
というのも、@EnvironmentObjectを付与したプロパティは複数のViewで共通のインスタンスを参照します。
つまり、アプリ全体で共通のプロパティとなります。


@StateObject
combineでバイディンングするクラスにつける(viewmodelと繋ぐ)

@Published
監視するプロパティにつける（UIとバインディングしている証拠なのでメインスレッドで触ること）

@State
バインディング用のプロパティラッパー
これつけていれば、変更が会った時にbodyを再発火できる

テーブルViewのセクション作る
List {
            Section(header: Text("Meeting Info")) {
            }
        }

TextField（TitleはPlacefolder、scrumData.titleはバインディングする値）
TextField("Title", text: $scrumData.title)

これだけでカラーピッカー出せる
ColorPicker("Color", selection: $scrumData.color)

ForEachでテーブル表示した値への削除アクションの定義
ForEach(scrumData.attendees, id: \.self) { attendee in
                    Text(attendee)
                }
                .onDelete { indices in
                    scrumData.attendees.remove(atOffsets: indices)
                }

プラスボタン
Button(action: {}) {
                        Image(systemName: "plus.circle.fill")
                    }

このBOOL値が変更になったら、画面遷移(full)で発動、どのViewを返すかはクロージャないで（Viewに対するオプション）
.fullScreenCover(isPresented: $isPresented) {
            EditView()
        }

NavigationView で囲むとナビバー特定を与えられる（titleとか設定できる、遷移はshowには変わらない）

EditViewにナビバーとbarbuttonitemつけている
NavigationView {
                EditView()
                    .navigationTitle(scrum.title)
                    .navigationBarItems(leading: Button("Cancel") {
                        isPresented = false
                    }, trailing: Button("Done") {
                        isPresented = false
                    })
            }

スライダー（5~30を5刻みで選択可能）
Slider(value: $scrumData.lengthInMinutes, in: 5...30, step: 5.0) {
                        Text("Length")
                    }

ボタンにかかるオプション（非活性、この場合はstringが空、指定したBOOL値でバインドされる、@Stateはいらないっっぽい）
.disabled(newAttendee.isEmpty)


アニメーション付きテーブル追加
withAnimation {
                            scrumData.attendees.append(newAttendee)
                        }

これの挙動がわからん
.font(.caption)


プレビューをフリーサイズで表示できる
.previewLayout(.fixed(width: 400, height: 60))


グラデーションの色作る
LinearGradientを使う
static let gradientStart = Color(red: 239.0 / 255, green: 120.0 / 255, blue: 221.0 / 255)
    static let gradientEnd = Color(red: 239.0 / 255, green: 172.0 / 255, blue: 120.0 / 255)

~~.fill(LinearGradient(
                            gradient: .init(colors: [Self.gradientStart, Self.gradientEnd]),
                            startPoint: .init(x: 0.5, y: 0),
                            endPoint: .init(x: 0.5, y: 0.6)
                        ))
レイヤーのアスペクト比をviewに合わせる
.aspectRatio(1, contentMode: .fit)


Viewに線を引く
Pathを使う
HexagonParameters.pointsに定義した線座標をつなげて、多角形を描く（中身は黒色）
move、addLineで表示、addQuadCurveで角丸
Path { path in
            var width: CGFloat = 100.0
            let height = width
            path.move(to: CGPoint(x: width * 0.95, y: height * 0.20))
            HexagonParameters.points.forEach {
                path.addLine(
                    to: .init(
                        x: width * $0.useWidth.0 * $0.xFactors.0,
                        y: height * $0.useHeight.0 * $0.yFactors.0
                    )
                )
            }
        }
        .fill(Color.black)

@EnvironmentObjectをつけるとViewクラス全体で共通のプロパティとなります。（View内部のshardなpropatyになる）
@EnvironmentObject var userData: UserData

@Environmentは初期値の設定を初期化時に行えるvar変数、letではなくvarで宣言できるので変数として扱える


@Stateを頭につけると変数が変更可能になる mutableになる、基本はSwiftUIのViewは変更不可能
@State var showFavoritesOnly = false


変数とのバインディングは頭に$をつける
$showFavoritesOnly
例
// スイッチタイプのセル生成
Toggle(isOn: $showFavoritesOnly) {
                    Text("Favorites only")
                }


// landmarkDataの要素(Landmark)をlistで並べる（idプロパティをkeyに取得するようにしている）
List(landmarkData, id: \.id) {}

↑はLandmarkクラスがIdentifiableプロトコルに準拠していれば、どのkeyで取得するかの指定はいらない
List(landmarkData) {}

プレビューpreviewできる端末のリストをターミナルで取得
xcrun simctl list devicetypes


static var previews: some View {
        Group { // 複数端末でpreview見る
            LandmarkList()
                .previewDevice(PreviewDevice(rawValue: "iPhone SE"))
                .previewDisplayName("iPhone SE")
            LandmarkList()
                .previewDevice(PreviewDevice(rawValue: "iPhone XS Max"))
                .previewDisplayName("iPhone XS Max")
        }
    }

パターン2

static var previews: some View {
        Group {
            ForEach(["iPhone SE", "iPhone Xs Max"], id: \.self) { deviceName in
                Wrapper()
                    .previewDevice(PreviewDevice(rawValue: deviceName))
                    .previewDisplayName(deviceName)
            }
        }
    }


for文で回してpreview端末増やす
ForEach(["iPhone SE", "iPhone XS Max"], id: \.self) { deviceName in
                LandmarkList()
                    .previewDevice(PreviewDevice(rawValue: deviceName))
                    .previewDisplayName(deviceName)
            }

@State var ddd: String

    var body: some View {
        TextField("ヒント、プレイスフォルダー文", text: $ddd)
    }